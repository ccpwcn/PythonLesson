import _thread


def thread_proc():
    for i in range(1, 10):
        print(i)


_thread.start_new_thread(thread_proc, ())

# 上述代码不会有任何输出，原因是程序启动的时候，都会有一个主线程，主线程执行完第9行代码之后，会立即退出
# 线程函数thread_proc并没有机会执行
# 上述理论适用于任何编程语言，无论是什么程序，启动时，会有一个主线程，其他线程都是主线程的子线程，或者子线程的子线程，只要主线程退出了，
# 程序就结束运行
# 因此，对于一些始终保持运行状态的程序，通常会有一个事件循环或者监听器之类的东西存在，保证主线程活跃
# 启动线程的操作是异步的，即：当我们调用启动线程的方法后，方法会立即返回，但是被调动的线程并不一定会立即开始执行，这还要依赖于操作系统层面的线程调度
